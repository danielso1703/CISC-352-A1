test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... FAIL
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... FAIL
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... FAIL
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... FAIL
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... FAIL
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... FAIL
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... FAIL
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... FAIL
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... FAIL
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... FAIL
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... FAIL
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... FAIL
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord MRV

======================================================================
FAIL: test_mrv_2 (__main__.TestMRV.test_mrv_2)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord MRV

======================================================================
FAIL: test_mrv_3 (__main__.TestMRV.test_mrv_3)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord MRV

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord MRV

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "'NoneType' object is not subscriptable". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.061s

FAILED (failures=43, errors=1)
----------------------------------------------------------------------
Time spent:

----------------------------------------------------------------------
Grades:

FC: 0.0/0.5
GAC: 0.0/0.75
MRV: 0.0/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.0/2.75
Code quality: ?/0.25

Running time: 2024_02_01-14:41:26

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed First Ord MRV Test

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth Ord MRV Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.277s

FAILED (failures=31, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0030s
test_bin_prop_fc_1: 0.0100s
test_bin_prop_fc_2: 0.0110s
test_bin_prop_fc_3: 0.0130s
test_bin_prop_fc_4: 0.0110s
test_prop_fc_0: 0.0020s
test_prop_fc_1: 0.0040s
test_prop_fc_2: 0.0190s
test_prop_fc_3: 0.0050s
test_prop_fc_4: 0.0090s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.125/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.625/2.75
Code quality: ?/0.25

Running time: 2024_02_04-17:43:52

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed First Ord MRV Test

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth Ord MRV Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.175s

FAILED (failures=31, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0020s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0060s
test_bin_prop_fc_3: 0.0050s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0040s
test_prop_fc_2: 0.0140s
test_prop_fc_3: 0.0035s
test_prop_fc_4: 0.0069s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.125/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.625/2.75
Code quality: ?/0.25

Running time: 2024_02_04-17:57:02

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed First Ord MRV Test

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth Ord MRV Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.133s

FAILED (failures=31, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0070s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0030s
test_prop_fc_2: 0.0130s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0030s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.125/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.625/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:24:35

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed First Ord MRV Test

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth Ord MRV Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.283s

FAILED (failures=31, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0470s
test_bin_prop_fc_3: 0.0130s
test_bin_prop_fc_4: 0.0200s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0040s
test_prop_fc_2: 0.0130s
test_prop_fc_3: 0.0040s
test_prop_fc_4: 0.0070s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.125/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.625/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:26:25

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed First Ord MRV Test

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth Ord MRV Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.121s

FAILED (failures=31, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0070s
test_bin_prop_fc_2: 0.0050s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0070s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0030s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.125/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.625/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:27:18

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed First Ord MRV Test

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth Ord MRV Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.202s

FAILED (failures=31, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0050s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0080s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0040s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.125/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.625/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:28:52

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed First Ord MRV Test

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth Ord MRV Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.214s

FAILED (failures=31, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0070s
test_bin_prop_fc_3: 0.0050s
test_bin_prop_fc_4: 0.0050s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0470s
test_prop_fc_3: 0.0050s
test_prop_fc_4: 0.0100s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.125/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.625/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:29:53

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... FAIL
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... FAIL
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_mrv_1 (__main__.TestMRV.test_mrv_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed First Ord MRV Test

======================================================================
FAIL: test_mrv_4 (__main__.TestMRV.test_mrv_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth Ord MRV Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.121s

FAILED (failures=31, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0050s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0060s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0030s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.125/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.625/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:30:27

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.121s

FAILED (failures=29, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0090s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.75/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:31:04

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.223s

FAILED (failures=29, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0040s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0060s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0060s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0090s
test_prop_fc_3: 0.0030s
test_prop_fc_4: 0.0480s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.75/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:33:21

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_1 (__main__.TestDH.test_dh_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed first DH Test

======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.162s

FAILED (failures=29, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0060s
test_bin_prop_fc_2: 0.0050s
test_bin_prop_fc_3: 0.0060s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0030s
test_prop_fc_2: 0.0110s
test_prop_fc_3: 0.0030s
test_prop_fc_4: 0.0070s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.0/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.75/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:37:36

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.146s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0030s
test_prop_fc_2: 0.0080s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0030s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:38:09

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.205s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0030s
test_bin_prop_fc_1: 0.0060s
test_bin_prop_fc_2: 0.0050s
test_bin_prop_fc_3: 0.0080s
test_bin_prop_fc_4: 0.0060s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0120s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0040s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:39:14

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.258s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0030s
test_bin_prop_fc_1: 0.0080s
test_bin_prop_fc_2: 0.0060s
test_bin_prop_fc_3: 0.0080s
test_bin_prop_fc_4: 0.0070s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0160s
test_prop_fc_3: 0.0050s
test_prop_fc_4: 0.0060s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:39:39

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.287s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0056s
test_bin_prop_fc_1: 0.0075s
test_bin_prop_fc_2: 0.0110s
test_bin_prop_fc_3: 0.0090s
test_bin_prop_fc_4: 0.0080s
test_prop_fc_0: 0.0020s
test_prop_fc_1: 0.0040s
test_prop_fc_2: 0.0146s
test_prop_fc_3: 0.0027s
test_prop_fc_4: 0.0060s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:40:31

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.150s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0040s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0090s
test_bin_prop_fc_3: 0.0050s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0090s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0030s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:40:41

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.444s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0040s
test_bin_prop_fc_1: 0.0160s
test_bin_prop_fc_2: 0.0160s
test_bin_prop_fc_3: 0.0620s
test_bin_prop_fc_4: 0.0140s
test_prop_fc_0: 0.0030s
test_prop_fc_1: 0.0070s
test_prop_fc_2: 0.0370s
test_prop_fc_3: 0.0050s
test_prop_fc_4: 0.0120s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:41:45

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


FAIL
================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.189s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0030s
test_bin_prop_fc_2: 0.0070s
test_bin_prop_fc_3: 0.0070s
test_bin_prop_fc_4: 0.0060s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0030s
test_prop_fc_2: 0.0110s
test_prop_fc_3: 0.0040s
test_prop_fc_4: 0.0050s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:41:48

===========================================
FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.194s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0020s
test_bin_prop_fc_1: 0.0060s
test_bin_prop_fc_2: 0.0080s
test_bin_prop_fc_3: 0.0070s
test_bin_prop_fc_4: 0.0050s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0110s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0050s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:41:48

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.305s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0040s
test_bin_prop_fc_1: 0.0090s
test_bin_prop_fc_2: 0.0110s
test_bin_prop_fc_3: 0.0140s
test_bin_prop_fc_4: 0.0090s
test_prop_fc_0: 0.0020s
test_prop_fc_1: 0.0050s
test_prop_fc_2: 0.0180s
test_prop_fc_3: 0.0040s
test_prop_fc_4: 0.0040s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:41:59

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.397s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0020s
test_bin_prop_fc_1: 0.0130s
test_bin_prop_fc_2: 0.0110s
test_bin_prop_fc_3: 0.0130s
test_bin_prop_fc_4: 0.0120s
test_prop_fc_0: 0.0030s
test_prop_fc_1: 0.0030s
test_prop_fc_2: 0.0200s
test_prop_fc_3: 0.0060s
test_prop_fc_4: 0.0080s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:42:14

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.165s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0100s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0050s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:42:27

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.121s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0060s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0030s
test_prop_fc_2: 0.0080s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0030s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:43:55

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.123s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0030s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0050s
test_prop_fc_3: 0.0030s
test_prop_fc_4: 0.0050s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:44:16

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.361s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0031s
test_bin_prop_fc_1: 0.0193s
test_bin_prop_fc_2: 0.0308s
test_bin_prop_fc_3: 0.0150s
test_bin_prop_fc_4: 0.0125s
test_prop_fc_0: 0.0016s
test_prop_fc_1: 0.0041s
test_prop_fc_2: 0.0255s
test_prop_fc_3: 0.0041s
test_prop_fc_4: 0.0113s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:45:17

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 43 tests in 0.110s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0031s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0050s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.0625/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.8125/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:46:34

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 43 tests in 0.111s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0080s
test_prop_fc_0: 0.0020s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0040s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.0625/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.8125/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:48:33

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.115s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0030s
test_prop_fc_2: 0.0040s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:52:43

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.212s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0070s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0040s
test_prop_fc_2: 0.0060s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0040s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:57:07

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... FAIL
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_3 (__main__.TestDH.test_dh_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed third DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed fourth DH Test

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.143s

FAILED (failures=28, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0050s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0060s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0040s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.0625/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.8125/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:58:38

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.117s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0060s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-18:59:00

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.135s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0050s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0070s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:23:08

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.149s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0020s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0060s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0040s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:24:02

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.115s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0050s
test_prop_fc_3: 0.0030s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:25:04

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.126s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0020s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0040s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:29:21

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 150, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.126s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0050s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0040s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:29:38

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 151, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 99, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.127s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0050s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0050s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0030s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:38:42

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 153, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 101, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.100s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0040s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0050s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0040s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:44:17

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 153, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 101, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.109s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0020s
test_bin_prop_fc_1: 0.0050s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0050s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:45:03

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... FAIL
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... FAIL
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... FAIL
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... FAIL
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... FAIL
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... FAIL
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... FAIL
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... FAIL
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... FAIL
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... FAIL
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... FAIL
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... FAIL

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 152, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid);
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\cagey_csp.py", line 100, in binary_ne_grid
    variable = Variable(domain=list(range(1, n+1)))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Variable.__init__() missing 1 required positional argument: 'name'

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_dh_2 (__main__.TestDH.test_dh_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed second DH Test

======================================================================
FAIL: test_dh_4 (__main__.TestDH.test_dh_4)
----------------------------------------------------------------------
AssertionError: False is not true : No Variable Returned from Ord DH

======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


======================================================================
FAIL: test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(3, [(3, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (2, 2)], '-'), (6, [(1, 3), (2, 3), (3, 3)], '*'), (5, [(3, 1), (3, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(6, [(1, 1), (2, 1)], '*'), (3, [(1, 2), (1, 3)], '+'), (3, [(1, 4), (2, 4)], '-'), (7, [(2, 2), (2, 3)], '+'), (2, [(3, 1), (3, 2)], '/'), (3, [(3, 3), (4, 3)], '-'), (6, [(3, 4), (4, 4)], '*'), (7, [(4, 1), (4, 2)], '+')])


======================================================================
FAIL: test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(16, [(1, 1), (1, 2), (2, 2)], '*'), (7, [(1, 3), (1, 4), (2, 3)], '+'), (4, [(2, 4)], '?'), (2, [(2, 1), (3, 1)], '-'), (2, [(3, 3), (3, 4)], '/'), (2, [(4, 3), (4, 4)], '/'), (12, [(3, 2), (4, 1), (4, 2)], '*')])


======================================================================
FAIL: test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(4, [(1, 1)], '?'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (6, [(2, 1), (2, 2), (3, 2)], '+'), (12, [(2, 3), (3, 3), (3, 4)], '*'), (1, [(3, 1), (4, 1)], '-'), (5, [(4, 2), (4, 3)], '+'), (2, [(4, 4)], '?')])


======================================================================
FAIL: test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 1)], '+'), (6, [(2, 4), (3, 4)], '*'), (2, [(3, 2), (3, 3)], '-'), (2, [(4, 1), (4, 2)], '-'), (2, [(4, 3), (4, 4)], '/')])


======================================================================
FAIL: test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(4, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (2, 4)], '-'), (1, [(1, 5), (2, 5)], '-'), (9, [(2, 2), (2, 3)], '+'), (3, [(3, 1), (3, 2)], '-'), (6, [(3, 3), (3, 4), (4, 4)], '*'), (9, [(3, 5), (4, 5)], '+'), (7, [(4, 1), (5, 1)], '+'), (3, [(4, 2), (4, 3)], '-'), (6, [(5, 2), (5, 3)], '*'), (4, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(10, [(1, 1), (1, 2), (2, 1), (2, 2)], '+'), (18, [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], '+'), (2, [(1, 5), (2, 5), (3, 5)], '-'), (1, [(3, 1), (3, 2), (3, 3)], '-'), (600, [(4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)], '*'), (2, [(4, 4), (5, 4), (5, 5)], '/'), (3, [(4, 5)], '?')])


======================================================================
FAIL: test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(5, [(2, [(1, 1), (2, 1)], '-'), (2, [(1, 2), (1, 3)], '/'), (1, [(1, 4), (1, 5)], '-'), (1, [(2, 2)], '?'), (2, [(2, 3), (2, 4)], '-'), (9, [(2, 5), (3, 5), (4, 5)], '+'), (6, [(3, 1), (3, 2)], '*'), (4, [(3, 3)], '?'), (3, [(3, 4), (4, 4)], '+'), (3, [(4, 1), (5, 1)], '-'), (15, [(4, 2), (4, 3)], '*'), (9, [(5, 2), (5, 3)], '+'), (1, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(11, [(1, 1), (2, 1)], '+'), (2, [(1, 2), (1, 3)], '/'), (20, [(1, 4), (2, 4)], '*'), (6, [(1, 5), (1, 6), (2, 6), (3, 6)], '*'), (3, [(2, 2), (2, 3)], '-'), (3, [(2, 5), (3, 5)], '/'), (240, [(3, 1), (3, 2), (4, 1), (4, 2)], '*'), (6, [(3, 3), (3, 4)], '*'), (6, [(4, 3), (5, 3)], '*'), (7, [(4, 4), (5, 4), (5, 5)], '+'), (30, [(4, 5), (4, 6)], '*'), (6, [(5, 1), (5, 2)], '*'), (9, [(5, 6), (6, 6)], '+'), (8, [(6, 1), (6, 2), (6, 3)], '+'), (2, [(6, 4), (6, 5)], '/')])


======================================================================
FAIL: test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to solve board!
(6, [(2, [(1, 1), (1, 2), (1, 3)], '/'), (3, [(1, 4), (1, 5)], '-'), (11, [(1, 6), (2, 6), (3, 6)], '+'), (2, [(2, 1), (2, 2), (2, 3)], '/'), (40, [(2, 4), (2, 5), (3, 4), (3, 5)], '*'), (14, [(3, 1), (4, 1), (5, 1), (6, 1)], '+'), (3600, [(3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3)], '*'), (120, [(4, 4), (5, 4), (6, 4)], '*'), (1, [(4, 5), (4, 6), (5, 5), (5, 6)], '-'), (5, [(6, 2), (6, 3)], '-'), (5, [(6, 5), (6, 6)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 0.108s

FAILED (failures=27, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0030s
test_bin_prop_fc_2: 0.0029s
test_bin_prop_fc_3: 0.0040s
test_bin_prop_fc_4: 0.0050s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0050s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.0/0.75
MRV: 0.25/0.25
DH: 0.125/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 0.875/2.75
Code quality: ?/0.25

Running time: 2024_02_04-19:47:18

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
                     ^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\cagey_csp.py", line 136, in cagey_csp_model
    csp, variables = binary_ne_grid(cagey_grid)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\cagey_csp.py", line 102, in binary_ne_grid
    return csp, variables
                ^^^^^^^^^
NameError: name 'variables' is not defined. Did you mean: 'Variable'?

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "name 'variables' is not defined". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.137s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0020s
test_bin_prop_fc_2: 0.0020s
test_bin_prop_fc_3: 0.0030s
test_bin_prop_fc_4: 0.0038s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0030s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0011s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0014s
test_prop_GAC_2: 0.0010s
test_prop_GAC_3: 0.0009s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0140s
test_prop_GAC_6: 0.0825s
test_prop_GAC_7: 0.0204s
test_prop_GAC_8: 0.5458s
test_prop_GAC_9: 0.4132s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:07:09

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.119s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0000s
test_bne_grid_3: 0.0010s
test_bne_grid_4: 0.0040s
test_bne_grid_5: 0.0068s
test_bin_prop_fc_0: 0.0011s
test_bin_prop_fc_1: 0.0015s
test_bin_prop_fc_2: 0.0020s
test_bin_prop_fc_3: 0.0021s
test_bin_prop_fc_4: 0.0021s
test_prop_fc_0: 0.0009s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0050s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0010s
test_prop_GAC_0: 0.0010s
test_prop_GAC_1: 0.0011s
test_prop_GAC_2: 0.0011s
test_prop_GAC_3: 0.0010s
test_prop_GAC_4: 0.0023s
test_prop_GAC_5: 0.0136s
test_prop_GAC_6: 0.0844s
test_prop_GAC_7: 0.0198s
test_prop_GAC_8: 0.5268s
test_prop_GAC_9: 0.4137s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:08:01

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.069s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0019s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0031s
test_bne_grid_4: 0.0030s
test_bne_grid_5: 0.0051s
test_bin_prop_fc_0: 0.0000s
test_bin_prop_fc_1: 0.0021s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0033s
test_bin_prop_fc_4: 0.0024s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0030s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0011s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0018s
test_prop_GAC_2: 0.0021s
test_prop_GAC_3: 0.0009s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0140s
test_prop_GAC_6: 0.0843s
test_prop_GAC_7: 0.0195s
test_prop_GAC_8: 0.5012s
test_prop_GAC_9: 0.3834s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:08:30

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.046s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0009s
test_bne_grid_3: 0.0011s
test_bne_grid_4: 0.0023s
test_bne_grid_5: 0.0045s
test_bin_prop_fc_0: 0.0000s
test_bin_prop_fc_1: 0.0022s
test_bin_prop_fc_2: 0.0010s
test_bin_prop_fc_3: 0.0020s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0011s
test_prop_fc_2: 0.0030s
test_prop_fc_3: 0.0006s
test_prop_fc_4: 0.0011s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0011s
test_prop_GAC_2: 0.0010s
test_prop_GAC_3: 0.0010s
test_prop_GAC_4: 0.0021s
test_prop_GAC_5: 0.0158s
test_prop_GAC_6: 0.0800s
test_prop_GAC_7: 0.0189s
test_prop_GAC_8: 0.4941s
test_prop_GAC_9: 0.3838s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:13:27

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.020s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0010s
test_bne_grid_4: 0.0030s
test_bne_grid_5: 0.0059s
test_bin_prop_fc_0: 0.0000s
test_bin_prop_fc_1: 0.0020s
test_bin_prop_fc_2: 0.0040s
test_bin_prop_fc_3: 0.0032s
test_bin_prop_fc_4: 0.0030s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0040s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0031s
test_prop_GAC_0: 0.0010s
test_prop_GAC_1: 0.0020s
test_prop_GAC_2: 0.0010s
test_prop_GAC_3: 0.0000s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0147s
test_prop_GAC_6: 0.0818s
test_prop_GAC_7: 0.0165s
test_prop_GAC_8: 0.4819s
test_prop_GAC_9: 0.3648s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:26:58

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.074s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0000s
test_bne_grid_2: 0.0000s
test_bne_grid_3: 0.0011s
test_bne_grid_4: 0.0019s
test_bne_grid_5: 0.0050s
test_bin_prop_fc_0: 0.0000s
test_bin_prop_fc_1: 0.0019s
test_bin_prop_fc_2: 0.0020s
test_bin_prop_fc_3: 0.0017s
test_bin_prop_fc_4: 0.0011s
test_prop_fc_0: 0.0009s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0030s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0010s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0014s
test_prop_GAC_2: 0.0034s
test_prop_GAC_3: 0.0010s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0139s
test_prop_GAC_6: 0.0794s
test_prop_GAC_7: 0.0187s
test_prop_GAC_8: 0.4999s
test_prop_GAC_9: 0.4036s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:32:12

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.058s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0005s
test_bne_grid_3: 0.0010s
test_bne_grid_4: 0.0030s
test_bne_grid_5: 0.0039s
test_bin_prop_fc_0: 0.0009s
test_bin_prop_fc_1: 0.0031s
test_bin_prop_fc_2: 0.0021s
test_bin_prop_fc_3: 0.0011s
test_bin_prop_fc_4: 0.0028s
test_prop_fc_0: 0.0011s
test_prop_fc_1: 0.0000s
test_prop_fc_2: 0.0030s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0011s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0010s
test_prop_GAC_2: 0.0019s
test_prop_GAC_3: 0.0010s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0147s
test_prop_GAC_6: 0.0829s
test_prop_GAC_7: 0.0178s
test_prop_GAC_8: 0.4828s
test_prop_GAC_9: 0.4004s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:33:12

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.086s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0030s
test_bne_grid_2: 0.0030s
test_bne_grid_3: 0.0020s
test_bne_grid_4: 0.0048s
test_bne_grid_5: 0.0060s
test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0020s
test_bin_prop_fc_2: 0.0020s
test_bin_prop_fc_3: 0.0020s
test_bin_prop_fc_4: 0.0020s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0031s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0010s
test_prop_GAC_2: 0.0010s
test_prop_GAC_3: 0.0010s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0150s
test_prop_GAC_6: 0.0860s
test_prop_GAC_7: 0.0190s
test_prop_GAC_8: 0.5157s
test_prop_GAC_9: 0.3892s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:34:47

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.200s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0133s
test_bne_grid_2: 0.0050s
test_bne_grid_3: 0.0078s
test_bne_grid_4: 0.0101s
test_bne_grid_5: 0.0190s
test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0020s
test_bin_prop_fc_2: 0.0038s
test_bin_prop_fc_3: 0.0020s
test_bin_prop_fc_4: 0.0010s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0030s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0010s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0016s
test_prop_GAC_2: 0.0040s
test_prop_GAC_3: 0.0021s
test_prop_GAC_4: 0.0029s
test_prop_GAC_5: 0.0162s
test_prop_GAC_6: 0.0914s
test_prop_GAC_7: 0.0240s
test_prop_GAC_8: 0.5289s
test_prop_GAC_9: 0.4176s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:36:13

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.156s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0095s
test_bne_grid_2: 0.0040s
test_bne_grid_3: 0.0070s
test_bne_grid_4: 0.0108s
test_bne_grid_5: 0.0166s
test_bin_prop_fc_0: 0.0010s
test_bin_prop_fc_1: 0.0028s
test_bin_prop_fc_2: 0.0011s
test_bin_prop_fc_3: 0.0020s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0037s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0020s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0010s
test_prop_GAC_2: 0.0011s
test_prop_GAC_3: 0.0000s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0159s
test_prop_GAC_6: 0.0806s
test_prop_GAC_7: 0.0176s
test_prop_GAC_8: 0.5122s
test_prop_GAC_9: 0.4268s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:37:04

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.187s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0000s
test_bne_grid_2: 0.0000s
test_bne_grid_3: 0.0002s
test_bne_grid_4: 0.0022s
test_bne_grid_5: 0.0031s
test_bin_prop_fc_0: 0.0000s
test_bin_prop_fc_1: 0.0020s
test_bin_prop_fc_2: 0.0020s
test_bin_prop_fc_3: 0.0020s
test_bin_prop_fc_4: 0.0020s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0000s
test_prop_fc_2: 0.0031s
test_prop_fc_3: 0.0000s
test_prop_fc_4: 0.0021s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0012s
test_prop_GAC_2: 0.0020s
test_prop_GAC_3: 0.0012s
test_prop_GAC_4: 0.0020s
test_prop_GAC_5: 0.0146s
test_prop_GAC_6: 0.0898s
test_prop_GAC_7: 0.0218s
test_prop_GAC_8: 0.5458s
test_prop_GAC_9: 0.4607s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:38:03

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\Jonathan Thompson\Desktop\352A1\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 1.100s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0040s
test_bne_grid_2: 0.0022s
test_bne_grid_3: 0.0030s
test_bne_grid_4: 0.0050s
test_bne_grid_5: 0.0070s
test_bin_prop_fc_0: 0.0000s
test_bin_prop_fc_1: 0.0020s
test_bin_prop_fc_2: 0.0020s
test_bin_prop_fc_3: 0.0013s
test_bin_prop_fc_4: 0.0020s
test_prop_fc_0: 0.0000s
test_prop_fc_1: 0.0000s
test_prop_fc_2: 0.0030s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0010s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0010s
test_prop_GAC_2: 0.0010s
test_prop_GAC_3: 0.0006s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0156s
test_prop_GAC_6: 0.0850s
test_prop_GAC_7: 0.0190s
test_prop_GAC_8: 0.5218s
test_prop_GAC_9: 0.3991s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-12:49:28

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... FAIL
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... FAIL
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... FAIL
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... FAIL
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... FAIL
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(3, [(1, 1), (2, 1)], '+'), (1, [(1, 2)], '?'), (8, [(1, 3), (2, 3), (2, 2)], '+'), (3, [(3, 1)], '?'), (3, [(3, 2), (3, 3)], '+')])


======================================================================
FAIL: test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (3, [(1, 3), (1, 4), (2, 3)], '*'), (8, [(2, 1), (2, 2), (3, 2)], '+'), (4, [(3, 4)], '?'), (3, [(3, 1), (4, 1)], '-'), (4, [(3, 3)], '?'), (6, [(3, 4), (4, 4)], '*'), (2, [(4, 2), (4, 3)], '/')])


======================================================================
FAIL: test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(1, [(1, 1), (2, 1)], '-'), (10, [(1, 2), (1, 3), (2, 3), (4, 3)], '+'), (9, [(1, 4), (1, 5), (2, 4), (2, 5)], '+'), (40, [(2, 2), (3, 1), (3, 2)], '*'), (50, [(3, 4), (4, 3), (4, 4)], '*'), (10, [(3, 5), (4, 5), (5, 5)], '+'), (9, [(4, 1), (4, 2), (5, 1), (5, 2)], '+'), (4, [(5, 3), (5, 4)], '/')])


======================================================================
FAIL: test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(11, [(1, 1), (2, 1)], '+'), (3, [(1, 2), (2, 2)], '*'), (20, [(1, 3), (2, 3), (3, 3)], '*'), (2, [(1, 4), (1, 5)], '-'), (6, [(1, 6), (2, 6)], '/'), (6, [(2, 4), (2, 5)], '*'), (5, [(3, 1), (4, 1)], '+'), (40, [(3, 2), (4, 2), (5, 2)], '*'), (10, [(3, 4), (4, 4)], '+'), (10, [(3, 5), (3, 6)], '*'), (3, [(4, 3), (5, 3)], '-'), (8, [(4, 5), (4, 6), (5, 6)], '+'), (1, [(5, 1), (6, 1), (6, 2)], '-'), (11, [(5, 4), (5, 5)], '+'), (1, [(6, 3), (6, 4)], '-'), (2, [(6, 5), (6, 6)], '-')])


======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 3.328s

FAILED (failures=15, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0019s
test_bne_grid_4: 0.0058s
test_bne_grid_5: 0.0118s
test_bin_prop_fc_0: 0.0026s
test_bin_prop_fc_1: 0.0072s
test_bin_prop_fc_2: 0.0095s
test_bin_prop_fc_3: 0.0107s
test_bin_prop_fc_4: 0.0084s
test_prop_fc_0: 0.0020s
test_prop_fc_1: 0.0052s
test_prop_fc_2: 0.0200s
test_prop_fc_3: 0.0051s
test_prop_fc_4: 0.0088s
test_prop_GAC_0: 0.0010s
test_prop_GAC_1: 0.0058s
test_prop_GAC_2: 0.0126s
test_prop_GAC_3: 0.0030s
test_prop_GAC_4: 0.0061s
test_prop_GAC_5: 0.0800s
test_prop_GAC_6: 0.4151s
test_prop_GAC_7: 0.0934s
test_prop_GAC_8: 1.4555s
test_prop_GAC_9: 1.0746s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.0/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 1.75/2.75
Code quality: ?/0.25

Running time: 2024_02_05-13:43:04

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "Variable.__init__() missing 1 required positional argument: 'name'". Failed to construct board!
(6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 3.207s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0021s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0062s
test_bne_grid_4: 0.0185s
test_bne_grid_5: 0.0578s
test_bin_prop_fc_0: 0.0000s
test_bin_prop_fc_1: 0.0137s
test_bin_prop_fc_2: 0.0084s
test_bin_prop_fc_3: 0.0055s
test_bin_prop_fc_4: 0.0020s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0051s
test_prop_fc_2: 0.0153s
test_prop_fc_3: 0.0029s
test_prop_fc_4: 0.0081s
test_prop_GAC_0: 0.0012s
test_prop_GAC_1: 0.0029s
test_prop_GAC_2: 0.0074s
test_prop_GAC_3: 0.0063s
test_prop_GAC_4: 0.0065s
test_prop_GAC_5: 0.0672s
test_prop_GAC_6: 0.2315s
test_prop_GAC_7: 0.0692s
test_prop_GAC_8: 1.3834s
test_prop_GAC_9: 1.2094s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-13:44:15

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 3.405s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0013s
test_bne_grid_2: 0.0021s
test_bne_grid_3: 0.0010s
test_bne_grid_4: 0.0323s
test_bne_grid_5: 0.0748s
test_nary_grid_1: 0.0000s
test_nary_grid_2: 0.0098s
test_nary_grid_3: 0.0308s
test_nary_grid_4: 0.1193s
test_bin_prop_fc_0: 0.0075s
test_bin_prop_fc_1: 0.0032s
test_bin_prop_fc_2: 0.0120s
test_bin_prop_fc_3: 0.0081s
test_bin_prop_fc_4: 0.0102s
test_prop_fc_0: 0.0032s
test_prop_fc_1: 0.0065s
test_prop_fc_2: 0.0173s
test_prop_fc_3: 0.0021s
test_prop_fc_4: 0.0062s
test_prop_GAC_0: 0.0030s
test_prop_GAC_1: 0.0093s
test_prop_GAC_2: 0.0085s
test_prop_GAC_3: 0.0090s
test_prop_GAC_4: 0.0042s
test_prop_GAC_5: 0.0919s
test_prop_GAC_6: 0.5870s
test_prop_GAC_7: 0.0956s
test_prop_GAC_8: 1.2596s
test_prop_GAC_9: 0.8514s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-13:48:59

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 2.951s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0042s
test_bne_grid_2: 0.0035s
test_bne_grid_3: 0.0141s
test_bne_grid_4: 0.0467s
test_bne_grid_5: 0.0816s
test_nary_grid_1: 0.0010s
test_nary_grid_2: 0.0040s
test_nary_grid_3: 0.0115s
test_nary_grid_4: 0.0724s
test_bin_prop_fc_0: 0.0027s
test_bin_prop_fc_1: 0.0035s
test_bin_prop_fc_2: 0.0078s
test_bin_prop_fc_3: 0.0096s
test_bin_prop_fc_4: 0.0072s
test_prop_fc_0: 0.0007s
test_prop_fc_1: 0.0033s
test_prop_fc_2: 0.0102s
test_prop_fc_3: 0.0026s
test_prop_fc_4: 0.0058s
test_prop_GAC_0: 0.0009s
test_prop_GAC_1: 0.0020s
test_prop_GAC_2: 0.0041s
test_prop_GAC_3: 0.0028s
test_prop_GAC_4: 0.0038s
test_prop_GAC_5: 0.0531s
test_prop_GAC_6: 0.2081s
test_prop_GAC_7: 0.0552s
test_prop_GAC_8: 1.3883s
test_prop_GAC_9: 0.8921s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-13:49:19

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 3.563s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0034s
test_bne_grid_2: 0.0017s
test_bne_grid_3: 0.0118s
test_bne_grid_4: 0.0468s
test_bne_grid_5: 0.1021s
test_nary_grid_1: 0.0034s
test_nary_grid_2: 0.0092s
test_nary_grid_3: 0.0418s
test_nary_grid_4: 0.1494s
test_bin_prop_fc_0: 0.0064s
test_bin_prop_fc_1: 0.0059s
test_bin_prop_fc_2: 0.0256s
test_bin_prop_fc_3: 0.0157s
test_bin_prop_fc_4: 0.0163s
test_prop_fc_0: 0.0024s
test_prop_fc_1: 0.0072s
test_prop_fc_2: 0.0290s
test_prop_fc_3: 0.0088s
test_prop_fc_4: 0.0190s
test_prop_GAC_0: 0.0044s
test_prop_GAC_1: 0.0120s
test_prop_GAC_2: 0.0118s
test_prop_GAC_3: 0.0113s
test_prop_GAC_4: 0.0145s
test_prop_GAC_5: 0.1314s
test_prop_GAC_6: 0.4970s
test_prop_GAC_7: 0.1035s
test_prop_GAC_8: 1.2951s
test_prop_GAC_9: 0.8755s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-13:50:47

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 2.562s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0042s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0481s
test_bne_grid_4: 0.0381s
test_bne_grid_5: 0.0490s
test_nary_grid_1: 0.0020s
test_nary_grid_2: 0.0040s
test_nary_grid_3: 0.0156s
test_nary_grid_4: 0.0741s
test_bin_prop_fc_0: 0.0024s
test_bin_prop_fc_1: 0.0073s
test_bin_prop_fc_2: 0.0076s
test_bin_prop_fc_3: 0.0066s
test_bin_prop_fc_4: 0.0075s
test_prop_fc_0: 0.0012s
test_prop_fc_1: 0.0040s
test_prop_fc_2: 0.0131s
test_prop_fc_3: 0.0046s
test_prop_fc_4: 0.0049s
test_prop_GAC_0: 0.0020s
test_prop_GAC_1: 0.0030s
test_prop_GAC_2: 0.0057s
test_prop_GAC_3: 0.0020s
test_prop_GAC_4: 0.0063s
test_prop_GAC_5: 0.0591s
test_prop_GAC_6: 0.2324s
test_prop_GAC_7: 0.0360s
test_prop_GAC_8: 1.0447s
test_prop_GAC_9: 0.7992s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-13:51:22

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 4.314s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0061s
test_bne_grid_2: 0.0024s
test_bne_grid_3: 0.0139s
test_bne_grid_4: 0.0214s
test_bne_grid_5: 0.0469s
test_nary_grid_1: 0.0036s
test_nary_grid_2: 0.0010s
test_nary_grid_3: 0.0052s
test_nary_grid_4: 0.0486s
test_bin_prop_fc_0: 0.0020s
test_bin_prop_fc_1: 0.0030s
test_bin_prop_fc_2: 0.0087s
test_bin_prop_fc_3: 0.0071s
test_bin_prop_fc_4: 0.0128s
test_prop_fc_0: 0.0016s
test_prop_fc_1: 0.0022s
test_prop_fc_2: 0.0094s
test_prop_fc_3: 0.0032s
test_prop_fc_4: 0.0058s
test_prop_GAC_0: 0.0011s
test_prop_GAC_1: 0.0056s
test_prop_GAC_2: 0.0081s
test_prop_GAC_3: 0.0032s
test_prop_GAC_4: 0.0065s
test_prop_GAC_5: 0.0556s
test_prop_GAC_6: 0.2638s
test_prop_GAC_7: 0.0554s
test_prop_GAC_8: 1.9751s
test_prop_GAC_9: 1.6646s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-13:55:43

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (3, [(2, [(1, 1), (1, 2)], '-'), (2, [(1, 3)], '?'), (2, [(2, 1), (3, 1)], '/'), (3, [(2, 2), (2, 3)], '/'), (1, [(3, 2), (3, 3)], '-')])


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (4, [(2, [(1, 1), (1, 2)], '/'), (7, [(1, 3), (2, 3)], '+'), (4, [(1, 4)], '?'), (1, [(2, 1), (2, 2)], '-'), (3, [(2, 2), (3, 2)], '-'), (2, [(2, 4), (3, 4)], '-'), (4, [(3, 3), (4, 3), (4, 4)], '*'), (1, [(4, 1), (4, 2)], '-')])


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (5, [(2, [(1, 1), (2, 1)], '/'), (1, [(1, 2), (2, 2)], '-'), (2, [(1, 3), (2, 3)], '-'), (4, [(1, 4), (1, 5)], '-'), (6, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (3, 2)], '-'), (3, [(3, 3), (4, 3)], '-'), (2, [(3, 4), (4, 4)], '/'), (3, [(3, 5), (4, 5)], '-'), (8, [(4, 1), (4, 2)], '+'), (7, [(5, 1), (5, 2), (5, 3)], '+'), (2, [(5, 4), (5, 5)], '-')])


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Encoded incorrect number of constraints for board: (6, [(2, [(1, 1), (1, 2)], '-'), (3, [(1, 3), (2, 3)], '-'), (5, [(1, 4), (1, 5)], '-'), (1, [(1, 6), (2, 6)], '-'), (2, [(2, 1), (2, 2)], '-'), (10, [(2, 4), (2, 5)], '*'), (2, [(3, 1), (4, 1)], '-'), (2, [(3, 2), (4, 2)], '/'), (30, [(3, 3), (3, 4)], '*'), (3, [(3, 5), (3, 6)], '-'), (6, [(4, 3), (4, 4)], '*'), (6, [(4, 4), (4, 5)], '+'), (6, [(5, 1), (5, 2)], '+'), (2, [(5, 3), (6, 3)], '/'), (2, [(5, 4), (5, 5)], '-'), (1, [(5, 6), (6, 6)], '-'), (3, [(6, 1), (6, 2)], '+'), (7, [(6, 4), (6, 5)], '+')])


----------------------------------------------------------------------
Ran 44 tests in 6.127s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0010s
test_bne_grid_4: 0.0114s
test_bne_grid_5: 0.0345s
test_nary_grid_1: 0.0070s
test_nary_grid_2: 0.0298s
test_nary_grid_3: 0.2564s
test_nary_grid_4: 2.2506s
test_bin_prop_fc_0: 0.0715s
test_bin_prop_fc_1: 0.0036s
test_bin_prop_fc_2: 0.0052s
test_bin_prop_fc_3: 0.0068s
test_bin_prop_fc_4: 0.0113s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0111s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0067s
test_prop_GAC_0: 0.0010s
test_prop_GAC_1: 0.0020s
test_prop_GAC_2: 0.0099s
test_prop_GAC_3: 0.0041s
test_prop_GAC_4: 0.0036s
test_prop_GAC_5: 0.0550s
test_prop_GAC_6: 0.2817s
test_prop_GAC_7: 0.1068s
test_prop_GAC_8: 1.6275s
test_prop_GAC_9: 1.2503s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:00:25

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}


----------------------------------------------------------------------
Ran 44 tests in 6.011s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0011s
test_bne_grid_3: 0.0010s
test_bne_grid_4: 0.0163s
test_bne_grid_5: 0.0478s
test_nary_grid_1: 0.0144s
test_nary_grid_2: 0.0991s
test_nary_grid_3: 0.4499s
test_nary_grid_4: 2.6922s
test_bin_prop_fc_0: 0.1107s
test_bin_prop_fc_1: 0.0031s
test_bin_prop_fc_2: 0.0066s
test_bin_prop_fc_3: 0.0053s
test_bin_prop_fc_4: 0.0068s
test_prop_fc_0: 0.0012s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0124s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0010s
test_prop_GAC_0: 0.0010s
test_prop_GAC_1: 0.0020s
test_prop_GAC_2: 0.0027s
test_prop_GAC_3: 0.0046s
test_prop_GAC_4: 0.0020s
test_prop_GAC_5: 0.0464s
test_prop_GAC_6: 0.2019s
test_prop_GAC_7: 0.0449s
test_prop_GAC_8: 1.3291s
test_prop_GAC_9: 0.7842s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:04:47

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}


----------------------------------------------------------------------
Ran 44 tests in 6.638s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0015s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0052s
test_bne_grid_4: 0.0141s
test_bne_grid_5: 0.0512s
test_nary_grid_1: 0.0146s
test_nary_grid_2: 0.0934s
test_nary_grid_3: 0.6478s
test_nary_grid_4: 2.8001s
test_bin_prop_fc_0: 0.1206s
test_bin_prop_fc_1: 0.0114s
test_bin_prop_fc_2: 0.0147s
test_bin_prop_fc_3: 0.0087s
test_bin_prop_fc_4: 0.0235s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0055s
test_prop_fc_2: 0.0212s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0082s
test_prop_GAC_0: 0.0020s
test_prop_GAC_1: 0.0076s
test_prop_GAC_2: 0.0137s
test_prop_GAC_3: 0.0039s
test_prop_GAC_4: 0.0052s
test_prop_GAC_5: 0.0780s
test_prop_GAC_6: 0.2680s
test_prop_GAC_7: 0.0521s
test_prop_GAC_8: 1.2321s
test_prop_GAC_9: 1.0197s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:05:31

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}


----------------------------------------------------------------------
Ran 44 tests in 6.559s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0012s
test_bne_grid_3: 0.0068s
test_bne_grid_4: 0.0189s
test_bne_grid_5: 0.0374s
test_nary_grid_1: 0.0092s
test_nary_grid_2: 0.0758s
test_nary_grid_3: 0.5196s
test_nary_grid_4: 3.3993s
test_bin_prop_fc_0: 0.1054s
test_bin_prop_fc_1: 0.0021s
test_bin_prop_fc_2: 0.0042s
test_bin_prop_fc_3: 0.0046s
test_bin_prop_fc_4: 0.0063s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0021s
test_prop_fc_2: 0.0134s
test_prop_fc_3: 0.0010s
test_prop_fc_4: 0.0030s
test_prop_GAC_0: 0.0022s
test_prop_GAC_1: 0.0033s
test_prop_GAC_2: 0.0054s
test_prop_GAC_3: 0.0020s
test_prop_GAC_4: 0.0030s
test_prop_GAC_5: 0.0417s
test_prop_GAC_6: 0.1809s
test_prop_GAC_7: 0.0381s
test_prop_GAC_8: 1.0047s
test_prop_GAC_9: 0.9746s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:14:00

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}


----------------------------------------------------------------------
Ran 44 tests in 6.831s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0026s
test_bne_grid_2: 0.0041s
test_bne_grid_3: 0.0104s
test_bne_grid_4: 0.0309s
test_bne_grid_5: 0.0796s
test_nary_grid_1: 0.0213s
test_nary_grid_2: 0.1525s
test_nary_grid_3: 0.6055s
test_nary_grid_4: 2.7845s
test_bin_prop_fc_0: 0.1557s
test_bin_prop_fc_1: 0.0021s
test_bin_prop_fc_2: 0.0073s
test_bin_prop_fc_3: 0.0021s
test_bin_prop_fc_4: 0.0065s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0083s
test_prop_fc_3: 0.0047s
test_prop_fc_4: 0.0031s
test_prop_GAC_0: 0.0020s
test_prop_GAC_1: 0.0038s
test_prop_GAC_2: 0.0041s
test_prop_GAC_3: 0.0033s
test_prop_GAC_4: 0.0047s
test_prop_GAC_5: 0.0490s
test_prop_GAC_6: 0.3732s
test_prop_GAC_7: 0.0590s
test_prop_GAC_8: 1.3081s
test_prop_GAC_9: 1.0183s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:15:46

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 615, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}


----------------------------------------------------------------------
Ran 44 tests in 6.762s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0021s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0040s
test_bne_grid_4: 0.0123s
test_bne_grid_5: 0.0321s
test_nary_grid_1: 0.0099s
test_nary_grid_2: 0.0852s
test_nary_grid_3: 0.8379s
test_nary_grid_4: 2.7632s
test_bin_prop_fc_0: 0.1092s
test_bin_prop_fc_1: 0.0062s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0063s
test_bin_prop_fc_4: 0.0040s
test_prop_fc_0: 0.0020s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0130s
test_prop_fc_3: 0.0047s
test_prop_fc_4: 0.0070s
test_prop_GAC_0: 0.0003s
test_prop_GAC_1: 0.0043s
test_prop_GAC_2: 0.0044s
test_prop_GAC_3: 0.0063s
test_prop_GAC_4: 0.0039s
test_prop_GAC_5: 0.0574s
test_prop_GAC_6: 0.2390s
test_prop_GAC_7: 0.0369s
test_prop_GAC_8: 1.2614s
test_prop_GAC_9: 1.1863s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:16:32

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 615, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}


----------------------------------------------------------------------
Ran 44 tests in 7.138s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0027s
test_bne_grid_2: 0.0041s
test_bne_grid_3: 0.0242s
test_bne_grid_4: 0.0538s
test_bne_grid_5: 0.0487s
test_nary_grid_1: 0.0153s
test_nary_grid_2: 0.1162s
test_nary_grid_3: 0.5473s
test_nary_grid_4: 3.4674s
test_bin_prop_fc_0: 0.1977s
test_bin_prop_fc_1: 0.0118s
test_bin_prop_fc_2: 0.0139s
test_bin_prop_fc_3: 0.0142s
test_bin_prop_fc_4: 0.0102s
test_prop_fc_0: 0.0026s
test_prop_fc_1: 0.0046s
test_prop_fc_2: 0.0180s
test_prop_fc_3: 0.0013s
test_prop_fc_4: 0.0127s
test_prop_GAC_0: 0.0010s
test_prop_GAC_1: 0.0041s
test_prop_GAC_2: 0.0154s
test_prop_GAC_3: 0.0095s
test_prop_GAC_4: 0.0112s
test_prop_GAC_5: 0.0936s
test_prop_GAC_6: 0.3353s
test_prop_GAC_7: 0.0701s
test_prop_GAC_8: 1.0012s
test_prop_GAC_9: 0.9284s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:16:48

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... FAIL
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... FAIL
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... FAIL
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... FAIL
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


======================================================================
FAIL: test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}
Failed to encode: {(1, 2, 3): True, (1, 3, 2): True, (2, 1, 3): True, (2, 3, 1): True, (3, 1, 2): True, (3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4): True, (1, 2, 4, 3): True, (1, 3, 2, 4): True, (1, 3, 4, 2): True, (1, 4, 2, 3): True, (1, 4, 3, 2): True, (2, 1, 3, 4): True, (2, 1, 4, 3): True, (2, 3, 1, 4): True, (2, 3, 4, 1): True, (2, 4, 1, 3): True, (2, 4, 3, 1): True, (3, 1, 2, 4): True, (3, 1, 4, 2): True, (3, 2, 1, 4): True, (3, 2, 4, 1): True, (3, 4, 1, 2): True, (3, 4, 2, 1): True, (4, 1, 2, 3): True, (4, 1, 3, 2): True, (4, 2, 1, 3): True, (4, 2, 3, 1): True, (4, 3, 1, 2): True, (4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5): True, (1, 2, 3, 5, 4): True, (1, 2, 4, 3, 5): True, (1, 2, 4, 5, 3): True, (1, 2, 5, 3, 4): True, (1, 2, 5, 4, 3): True, (1, 3, 2, 4, 5): True, (1, 3, 2, 5, 4): True, (1, 3, 4, 2, 5): True, (1, 3, 4, 5, 2): True, (1, 3, 5, 2, 4): True, (1, 3, 5, 4, 2): True, (1, 4, 2, 3, 5): True, (1, 4, 2, 5, 3): True, (1, 4, 3, 2, 5): True, (1, 4, 3, 5, 2): True, (1, 4, 5, 2, 3): True, (1, 4, 5, 3, 2): True, (1, 5, 2, 3, 4): True, (1, 5, 2, 4, 3): True, (1, 5, 3, 2, 4): True, (1, 5, 3, 4, 2): True, (1, 5, 4, 2, 3): True, (1, 5, 4, 3, 2): True, (2, 1, 3, 4, 5): True, (2, 1, 3, 5, 4): True, (2, 1, 4, 3, 5): True, (2, 1, 4, 5, 3): True, (2, 1, 5, 3, 4): True, (2, 1, 5, 4, 3): True, (2, 3, 1, 4, 5): True, (2, 3, 1, 5, 4): True, (2, 3, 4, 1, 5): True, (2, 3, 4, 5, 1): True, (2, 3, 5, 1, 4): True, (2, 3, 5, 4, 1): True, (2, 4, 1, 3, 5): True, (2, 4, 1, 5, 3): True, (2, 4, 3, 1, 5): True, (2, 4, 3, 5, 1): True, (2, 4, 5, 1, 3): True, (2, 4, 5, 3, 1): True, (2, 5, 1, 3, 4): True, (2, 5, 1, 4, 3): True, (2, 5, 3, 1, 4): True, (2, 5, 3, 4, 1): True, (2, 5, 4, 1, 3): True, (2, 5, 4, 3, 1): True, (3, 1, 2, 4, 5): True, (3, 1, 2, 5, 4): True, (3, 1, 4, 2, 5): True, (3, 1, 4, 5, 2): True, (3, 1, 5, 2, 4): True, (3, 1, 5, 4, 2): True, (3, 2, 1, 4, 5): True, (3, 2, 1, 5, 4): True, (3, 2, 4, 1, 5): True, (3, 2, 4, 5, 1): True, (3, 2, 5, 1, 4): True, (3, 2, 5, 4, 1): True, (3, 4, 1, 2, 5): True, (3, 4, 1, 5, 2): True, (3, 4, 2, 1, 5): True, (3, 4, 2, 5, 1): True, (3, 4, 5, 1, 2): True, (3, 4, 5, 2, 1): True, (3, 5, 1, 2, 4): True, (3, 5, 1, 4, 2): True, (3, 5, 2, 1, 4): True, (3, 5, 2, 4, 1): True, (3, 5, 4, 1, 2): True, (3, 5, 4, 2, 1): True, (4, 1, 2, 3, 5): True, (4, 1, 2, 5, 3): True, (4, 1, 3, 2, 5): True, (4, 1, 3, 5, 2): True, (4, 1, 5, 2, 3): True, (4, 1, 5, 3, 2): True, (4, 2, 1, 3, 5): True, (4, 2, 1, 5, 3): True, (4, 2, 3, 1, 5): True, (4, 2, 3, 5, 1): True, (4, 2, 5, 1, 3): True, (4, 2, 5, 3, 1): True, (4, 3, 1, 2, 5): True, (4, 3, 1, 5, 2): True, (4, 3, 2, 1, 5): True, (4, 3, 2, 5, 1): True, (4, 3, 5, 1, 2): True, (4, 3, 5, 2, 1): True, (4, 5, 1, 2, 3): True, (4, 5, 1, 3, 2): True, (4, 5, 2, 1, 3): True, (4, 5, 2, 3, 1): True, (4, 5, 3, 1, 2): True, (4, 5, 3, 2, 1): True, (5, 1, 2, 3, 4): True, (5, 1, 2, 4, 3): True, (5, 1, 3, 2, 4): True, (5, 1, 3, 4, 2): True, (5, 1, 4, 2, 3): True, (5, 1, 4, 3, 2): True, (5, 2, 1, 3, 4): True, (5, 2, 1, 4, 3): True, (5, 2, 3, 1, 4): True, (5, 2, 3, 4, 1): True, (5, 2, 4, 1, 3): True, (5, 2, 4, 3, 1): True, (5, 3, 1, 2, 4): True, (5, 3, 1, 4, 2): True, (5, 3, 2, 1, 4): True, (5, 3, 2, 4, 1): True, (5, 3, 4, 1, 2): True, (5, 3, 4, 2, 1): True, (5, 4, 1, 2, 3): True, (5, 4, 1, 3, 2): True, (5, 4, 2, 1, 3): True, (5, 4, 2, 3, 1): True, (5, 4, 3, 1, 2): True, (5, 4, 3, 2, 1): True}


======================================================================
FAIL: test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4)
----------------------------------------------------------------------
AssertionError: False is not true : Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}
Failed to encode: {(1, 2, 3, 4, 5, 6): True, (1, 2, 3, 4, 6, 5): True, (1, 2, 3, 5, 4, 6): True, (1, 2, 3, 5, 6, 4): True, (1, 2, 3, 6, 4, 5): True, (1, 2, 3, 6, 5, 4): True, (1, 2, 4, 3, 5, 6): True, (1, 2, 4, 3, 6, 5): True, (1, 2, 4, 5, 3, 6): True, (1, 2, 4, 5, 6, 3): True, (1, 2, 4, 6, 3, 5): True, (1, 2, 4, 6, 5, 3): True, (1, 2, 5, 3, 4, 6): True, (1, 2, 5, 3, 6, 4): True, (1, 2, 5, 4, 3, 6): True, (1, 2, 5, 4, 6, 3): True, (1, 2, 5, 6, 3, 4): True, (1, 2, 5, 6, 4, 3): True, (1, 2, 6, 3, 4, 5): True, (1, 2, 6, 3, 5, 4): True, (1, 2, 6, 4, 3, 5): True, (1, 2, 6, 4, 5, 3): True, (1, 2, 6, 5, 3, 4): True, (1, 2, 6, 5, 4, 3): True, (1, 3, 2, 4, 5, 6): True, (1, 3, 2, 4, 6, 5): True, (1, 3, 2, 5, 4, 6): True, (1, 3, 2, 5, 6, 4): True, (1, 3, 2, 6, 4, 5): True, (1, 3, 2, 6, 5, 4): True, (1, 3, 4, 2, 5, 6): True, (1, 3, 4, 2, 6, 5): True, (1, 3, 4, 5, 2, 6): True, (1, 3, 4, 5, 6, 2): True, (1, 3, 4, 6, 2, 5): True, (1, 3, 4, 6, 5, 2): True, (1, 3, 5, 2, 4, 6): True, (1, 3, 5, 2, 6, 4): True, (1, 3, 5, 4, 2, 6): True, (1, 3, 5, 4, 6, 2): True, (1, 3, 5, 6, 2, 4): True, (1, 3, 5, 6, 4, 2): True, (1, 3, 6, 2, 4, 5): True, (1, 3, 6, 2, 5, 4): True, (1, 3, 6, 4, 2, 5): True, (1, 3, 6, 4, 5, 2): True, (1, 3, 6, 5, 2, 4): True, (1, 3, 6, 5, 4, 2): True, (1, 4, 2, 3, 5, 6): True, (1, 4, 2, 3, 6, 5): True, (1, 4, 2, 5, 3, 6): True, (1, 4, 2, 5, 6, 3): True, (1, 4, 2, 6, 3, 5): True, (1, 4, 2, 6, 5, 3): True, (1, 4, 3, 2, 5, 6): True, (1, 4, 3, 2, 6, 5): True, (1, 4, 3, 5, 2, 6): True, (1, 4, 3, 5, 6, 2): True, (1, 4, 3, 6, 2, 5): True, (1, 4, 3, 6, 5, 2): True, (1, 4, 5, 2, 3, 6): True, (1, 4, 5, 2, 6, 3): True, (1, 4, 5, 3, 2, 6): True, (1, 4, 5, 3, 6, 2): True, (1, 4, 5, 6, 2, 3): True, (1, 4, 5, 6, 3, 2): True, (1, 4, 6, 2, 3, 5): True, (1, 4, 6, 2, 5, 3): True, (1, 4, 6, 3, 2, 5): True, (1, 4, 6, 3, 5, 2): True, (1, 4, 6, 5, 2, 3): True, (1, 4, 6, 5, 3, 2): True, (1, 5, 2, 3, 4, 6): True, (1, 5, 2, 3, 6, 4): True, (1, 5, 2, 4, 3, 6): True, (1, 5, 2, 4, 6, 3): True, (1, 5, 2, 6, 3, 4): True, (1, 5, 2, 6, 4, 3): True, (1, 5, 3, 2, 4, 6): True, (1, 5, 3, 2, 6, 4): True, (1, 5, 3, 4, 2, 6): True, (1, 5, 3, 4, 6, 2): True, (1, 5, 3, 6, 2, 4): True, (1, 5, 3, 6, 4, 2): True, (1, 5, 4, 2, 3, 6): True, (1, 5, 4, 2, 6, 3): True, (1, 5, 4, 3, 2, 6): True, (1, 5, 4, 3, 6, 2): True, (1, 5, 4, 6, 2, 3): True, (1, 5, 4, 6, 3, 2): True, (1, 5, 6, 2, 3, 4): True, (1, 5, 6, 2, 4, 3): True, (1, 5, 6, 3, 2, 4): True, (1, 5, 6, 3, 4, 2): True, (1, 5, 6, 4, 2, 3): True, (1, 5, 6, 4, 3, 2): True, (1, 6, 2, 3, 4, 5): True, (1, 6, 2, 3, 5, 4): True, (1, 6, 2, 4, 3, 5): True, (1, 6, 2, 4, 5, 3): True, (1, 6, 2, 5, 3, 4): True, (1, 6, 2, 5, 4, 3): True, (1, 6, 3, 2, 4, 5): True, (1, 6, 3, 2, 5, 4): True, (1, 6, 3, 4, 2, 5): True, (1, 6, 3, 4, 5, 2): True, (1, 6, 3, 5, 2, 4): True, (1, 6, 3, 5, 4, 2): True, (1, 6, 4, 2, 3, 5): True, (1, 6, 4, 2, 5, 3): True, (1, 6, 4, 3, 2, 5): True, (1, 6, 4, 3, 5, 2): True, (1, 6, 4, 5, 2, 3): True, (1, 6, 4, 5, 3, 2): True, (1, 6, 5, 2, 3, 4): True, (1, 6, 5, 2, 4, 3): True, (1, 6, 5, 3, 2, 4): True, (1, 6, 5, 3, 4, 2): True, (1, 6, 5, 4, 2, 3): True, (1, 6, 5, 4, 3, 2): True, (2, 1, 3, 4, 5, 6): True, (2, 1, 3, 4, 6, 5): True, (2, 1, 3, 5, 4, 6): True, (2, 1, 3, 5, 6, 4): True, (2, 1, 3, 6, 4, 5): True, (2, 1, 3, 6, 5, 4): True, (2, 1, 4, 3, 5, 6): True, (2, 1, 4, 3, 6, 5): True, (2, 1, 4, 5, 3, 6): True, (2, 1, 4, 5, 6, 3): True, (2, 1, 4, 6, 3, 5): True, (2, 1, 4, 6, 5, 3): True, (2, 1, 5, 3, 4, 6): True, (2, 1, 5, 3, 6, 4): True, (2, 1, 5, 4, 3, 6): True, (2, 1, 5, 4, 6, 3): True, (2, 1, 5, 6, 3, 4): True, (2, 1, 5, 6, 4, 3): True, (2, 1, 6, 3, 4, 5): True, (2, 1, 6, 3, 5, 4): True, (2, 1, 6, 4, 3, 5): True, (2, 1, 6, 4, 5, 3): True, (2, 1, 6, 5, 3, 4): True, (2, 1, 6, 5, 4, 3): True, (2, 3, 1, 4, 5, 6): True, (2, 3, 1, 4, 6, 5): True, (2, 3, 1, 5, 4, 6): True, (2, 3, 1, 5, 6, 4): True, (2, 3, 1, 6, 4, 5): True, (2, 3, 1, 6, 5, 4): True, (2, 3, 4, 1, 5, 6): True, (2, 3, 4, 1, 6, 5): True, (2, 3, 4, 5, 1, 6): True, (2, 3, 4, 5, 6, 1): True, (2, 3, 4, 6, 1, 5): True, (2, 3, 4, 6, 5, 1): True, (2, 3, 5, 1, 4, 6): True, (2, 3, 5, 1, 6, 4): True, (2, 3, 5, 4, 1, 6): True, (2, 3, 5, 4, 6, 1): True, (2, 3, 5, 6, 1, 4): True, (2, 3, 5, 6, 4, 1): True, (2, 3, 6, 1, 4, 5): True, (2, 3, 6, 1, 5, 4): True, (2, 3, 6, 4, 1, 5): True, (2, 3, 6, 4, 5, 1): True, (2, 3, 6, 5, 1, 4): True, (2, 3, 6, 5, 4, 1): True, (2, 4, 1, 3, 5, 6): True, (2, 4, 1, 3, 6, 5): True, (2, 4, 1, 5, 3, 6): True, (2, 4, 1, 5, 6, 3): True, (2, 4, 1, 6, 3, 5): True, (2, 4, 1, 6, 5, 3): True, (2, 4, 3, 1, 5, 6): True, (2, 4, 3, 1, 6, 5): True, (2, 4, 3, 5, 1, 6): True, (2, 4, 3, 5, 6, 1): True, (2, 4, 3, 6, 1, 5): True, (2, 4, 3, 6, 5, 1): True, (2, 4, 5, 1, 3, 6): True, (2, 4, 5, 1, 6, 3): True, (2, 4, 5, 3, 1, 6): True, (2, 4, 5, 3, 6, 1): True, (2, 4, 5, 6, 1, 3): True, (2, 4, 5, 6, 3, 1): True, (2, 4, 6, 1, 3, 5): True, (2, 4, 6, 1, 5, 3): True, (2, 4, 6, 3, 1, 5): True, (2, 4, 6, 3, 5, 1): True, (2, 4, 6, 5, 1, 3): True, (2, 4, 6, 5, 3, 1): True, (2, 5, 1, 3, 4, 6): True, (2, 5, 1, 3, 6, 4): True, (2, 5, 1, 4, 3, 6): True, (2, 5, 1, 4, 6, 3): True, (2, 5, 1, 6, 3, 4): True, (2, 5, 1, 6, 4, 3): True, (2, 5, 3, 1, 4, 6): True, (2, 5, 3, 1, 6, 4): True, (2, 5, 3, 4, 1, 6): True, (2, 5, 3, 4, 6, 1): True, (2, 5, 3, 6, 1, 4): True, (2, 5, 3, 6, 4, 1): True, (2, 5, 4, 1, 3, 6): True, (2, 5, 4, 1, 6, 3): True, (2, 5, 4, 3, 1, 6): True, (2, 5, 4, 3, 6, 1): True, (2, 5, 4, 6, 1, 3): True, (2, 5, 4, 6, 3, 1): True, (2, 5, 6, 1, 3, 4): True, (2, 5, 6, 1, 4, 3): True, (2, 5, 6, 3, 1, 4): True, (2, 5, 6, 3, 4, 1): True, (2, 5, 6, 4, 1, 3): True, (2, 5, 6, 4, 3, 1): True, (2, 6, 1, 3, 4, 5): True, (2, 6, 1, 3, 5, 4): True, (2, 6, 1, 4, 3, 5): True, (2, 6, 1, 4, 5, 3): True, (2, 6, 1, 5, 3, 4): True, (2, 6, 1, 5, 4, 3): True, (2, 6, 3, 1, 4, 5): True, (2, 6, 3, 1, 5, 4): True, (2, 6, 3, 4, 1, 5): True, (2, 6, 3, 4, 5, 1): True, (2, 6, 3, 5, 1, 4): True, (2, 6, 3, 5, 4, 1): True, (2, 6, 4, 1, 3, 5): True, (2, 6, 4, 1, 5, 3): True, (2, 6, 4, 3, 1, 5): True, (2, 6, 4, 3, 5, 1): True, (2, 6, 4, 5, 1, 3): True, (2, 6, 4, 5, 3, 1): True, (2, 6, 5, 1, 3, 4): True, (2, 6, 5, 1, 4, 3): True, (2, 6, 5, 3, 1, 4): True, (2, 6, 5, 3, 4, 1): True, (2, 6, 5, 4, 1, 3): True, (2, 6, 5, 4, 3, 1): True, (3, 1, 2, 4, 5, 6): True, (3, 1, 2, 4, 6, 5): True, (3, 1, 2, 5, 4, 6): True, (3, 1, 2, 5, 6, 4): True, (3, 1, 2, 6, 4, 5): True, (3, 1, 2, 6, 5, 4): True, (3, 1, 4, 2, 5, 6): True, (3, 1, 4, 2, 6, 5): True, (3, 1, 4, 5, 2, 6): True, (3, 1, 4, 5, 6, 2): True, (3, 1, 4, 6, 2, 5): True, (3, 1, 4, 6, 5, 2): True, (3, 1, 5, 2, 4, 6): True, (3, 1, 5, 2, 6, 4): True, (3, 1, 5, 4, 2, 6): True, (3, 1, 5, 4, 6, 2): True, (3, 1, 5, 6, 2, 4): True, (3, 1, 5, 6, 4, 2): True, (3, 1, 6, 2, 4, 5): True, (3, 1, 6, 2, 5, 4): True, (3, 1, 6, 4, 2, 5): True, (3, 1, 6, 4, 5, 2): True, (3, 1, 6, 5, 2, 4): True, (3, 1, 6, 5, 4, 2): True, (3, 2, 1, 4, 5, 6): True, (3, 2, 1, 4, 6, 5): True, (3, 2, 1, 5, 4, 6): True, (3, 2, 1, 5, 6, 4): True, (3, 2, 1, 6, 4, 5): True, (3, 2, 1, 6, 5, 4): True, (3, 2, 4, 1, 5, 6): True, (3, 2, 4, 1, 6, 5): True, (3, 2, 4, 5, 1, 6): True, (3, 2, 4, 5, 6, 1): True, (3, 2, 4, 6, 1, 5): True, (3, 2, 4, 6, 5, 1): True, (3, 2, 5, 1, 4, 6): True, (3, 2, 5, 1, 6, 4): True, (3, 2, 5, 4, 1, 6): True, (3, 2, 5, 4, 6, 1): True, (3, 2, 5, 6, 1, 4): True, (3, 2, 5, 6, 4, 1): True, (3, 2, 6, 1, 4, 5): True, (3, 2, 6, 1, 5, 4): True, (3, 2, 6, 4, 1, 5): True, (3, 2, 6, 4, 5, 1): True, (3, 2, 6, 5, 1, 4): True, (3, 2, 6, 5, 4, 1): True, (3, 4, 1, 2, 5, 6): True, (3, 4, 1, 2, 6, 5): True, (3, 4, 1, 5, 2, 6): True, (3, 4, 1, 5, 6, 2): True, (3, 4, 1, 6, 2, 5): True, (3, 4, 1, 6, 5, 2): True, (3, 4, 2, 1, 5, 6): True, (3, 4, 2, 1, 6, 5): True, (3, 4, 2, 5, 1, 6): True, (3, 4, 2, 5, 6, 1): True, (3, 4, 2, 6, 1, 5): True, (3, 4, 2, 6, 5, 1): True, (3, 4, 5, 1, 2, 6): True, (3, 4, 5, 1, 6, 2): True, (3, 4, 5, 2, 1, 6): True, (3, 4, 5, 2, 6, 1): True, (3, 4, 5, 6, 1, 2): True, (3, 4, 5, 6, 2, 1): True, (3, 4, 6, 1, 2, 5): True, (3, 4, 6, 1, 5, 2): True, (3, 4, 6, 2, 1, 5): True, (3, 4, 6, 2, 5, 1): True, (3, 4, 6, 5, 1, 2): True, (3, 4, 6, 5, 2, 1): True, (3, 5, 1, 2, 4, 6): True, (3, 5, 1, 2, 6, 4): True, (3, 5, 1, 4, 2, 6): True, (3, 5, 1, 4, 6, 2): True, (3, 5, 1, 6, 2, 4): True, (3, 5, 1, 6, 4, 2): True, (3, 5, 2, 1, 4, 6): True, (3, 5, 2, 1, 6, 4): True, (3, 5, 2, 4, 1, 6): True, (3, 5, 2, 4, 6, 1): True, (3, 5, 2, 6, 1, 4): True, (3, 5, 2, 6, 4, 1): True, (3, 5, 4, 1, 2, 6): True, (3, 5, 4, 1, 6, 2): True, (3, 5, 4, 2, 1, 6): True, (3, 5, 4, 2, 6, 1): True, (3, 5, 4, 6, 1, 2): True, (3, 5, 4, 6, 2, 1): True, (3, 5, 6, 1, 2, 4): True, (3, 5, 6, 1, 4, 2): True, (3, 5, 6, 2, 1, 4): True, (3, 5, 6, 2, 4, 1): True, (3, 5, 6, 4, 1, 2): True, (3, 5, 6, 4, 2, 1): True, (3, 6, 1, 2, 4, 5): True, (3, 6, 1, 2, 5, 4): True, (3, 6, 1, 4, 2, 5): True, (3, 6, 1, 4, 5, 2): True, (3, 6, 1, 5, 2, 4): True, (3, 6, 1, 5, 4, 2): True, (3, 6, 2, 1, 4, 5): True, (3, 6, 2, 1, 5, 4): True, (3, 6, 2, 4, 1, 5): True, (3, 6, 2, 4, 5, 1): True, (3, 6, 2, 5, 1, 4): True, (3, 6, 2, 5, 4, 1): True, (3, 6, 4, 1, 2, 5): True, (3, 6, 4, 1, 5, 2): True, (3, 6, 4, 2, 1, 5): True, (3, 6, 4, 2, 5, 1): True, (3, 6, 4, 5, 1, 2): True, (3, 6, 4, 5, 2, 1): True, (3, 6, 5, 1, 2, 4): True, (3, 6, 5, 1, 4, 2): True, (3, 6, 5, 2, 1, 4): True, (3, 6, 5, 2, 4, 1): True, (3, 6, 5, 4, 1, 2): True, (3, 6, 5, 4, 2, 1): True, (4, 1, 2, 3, 5, 6): True, (4, 1, 2, 3, 6, 5): True, (4, 1, 2, 5, 3, 6): True, (4, 1, 2, 5, 6, 3): True, (4, 1, 2, 6, 3, 5): True, (4, 1, 2, 6, 5, 3): True, (4, 1, 3, 2, 5, 6): True, (4, 1, 3, 2, 6, 5): True, (4, 1, 3, 5, 2, 6): True, (4, 1, 3, 5, 6, 2): True, (4, 1, 3, 6, 2, 5): True, (4, 1, 3, 6, 5, 2): True, (4, 1, 5, 2, 3, 6): True, (4, 1, 5, 2, 6, 3): True, (4, 1, 5, 3, 2, 6): True, (4, 1, 5, 3, 6, 2): True, (4, 1, 5, 6, 2, 3): True, (4, 1, 5, 6, 3, 2): True, (4, 1, 6, 2, 3, 5): True, (4, 1, 6, 2, 5, 3): True, (4, 1, 6, 3, 2, 5): True, (4, 1, 6, 3, 5, 2): True, (4, 1, 6, 5, 2, 3): True, (4, 1, 6, 5, 3, 2): True, (4, 2, 1, 3, 5, 6): True, (4, 2, 1, 3, 6, 5): True, (4, 2, 1, 5, 3, 6): True, (4, 2, 1, 5, 6, 3): True, (4, 2, 1, 6, 3, 5): True, (4, 2, 1, 6, 5, 3): True, (4, 2, 3, 1, 5, 6): True, (4, 2, 3, 1, 6, 5): True, (4, 2, 3, 5, 1, 6): True, (4, 2, 3, 5, 6, 1): True, (4, 2, 3, 6, 1, 5): True, (4, 2, 3, 6, 5, 1): True, (4, 2, 5, 1, 3, 6): True, (4, 2, 5, 1, 6, 3): True, (4, 2, 5, 3, 1, 6): True, (4, 2, 5, 3, 6, 1): True, (4, 2, 5, 6, 1, 3): True, (4, 2, 5, 6, 3, 1): True, (4, 2, 6, 1, 3, 5): True, (4, 2, 6, 1, 5, 3): True, (4, 2, 6, 3, 1, 5): True, (4, 2, 6, 3, 5, 1): True, (4, 2, 6, 5, 1, 3): True, (4, 2, 6, 5, 3, 1): True, (4, 3, 1, 2, 5, 6): True, (4, 3, 1, 2, 6, 5): True, (4, 3, 1, 5, 2, 6): True, (4, 3, 1, 5, 6, 2): True, (4, 3, 1, 6, 2, 5): True, (4, 3, 1, 6, 5, 2): True, (4, 3, 2, 1, 5, 6): True, (4, 3, 2, 1, 6, 5): True, (4, 3, 2, 5, 1, 6): True, (4, 3, 2, 5, 6, 1): True, (4, 3, 2, 6, 1, 5): True, (4, 3, 2, 6, 5, 1): True, (4, 3, 5, 1, 2, 6): True, (4, 3, 5, 1, 6, 2): True, (4, 3, 5, 2, 1, 6): True, (4, 3, 5, 2, 6, 1): True, (4, 3, 5, 6, 1, 2): True, (4, 3, 5, 6, 2, 1): True, (4, 3, 6, 1, 2, 5): True, (4, 3, 6, 1, 5, 2): True, (4, 3, 6, 2, 1, 5): True, (4, 3, 6, 2, 5, 1): True, (4, 3, 6, 5, 1, 2): True, (4, 3, 6, 5, 2, 1): True, (4, 5, 1, 2, 3, 6): True, (4, 5, 1, 2, 6, 3): True, (4, 5, 1, 3, 2, 6): True, (4, 5, 1, 3, 6, 2): True, (4, 5, 1, 6, 2, 3): True, (4, 5, 1, 6, 3, 2): True, (4, 5, 2, 1, 3, 6): True, (4, 5, 2, 1, 6, 3): True, (4, 5, 2, 3, 1, 6): True, (4, 5, 2, 3, 6, 1): True, (4, 5, 2, 6, 1, 3): True, (4, 5, 2, 6, 3, 1): True, (4, 5, 3, 1, 2, 6): True, (4, 5, 3, 1, 6, 2): True, (4, 5, 3, 2, 1, 6): True, (4, 5, 3, 2, 6, 1): True, (4, 5, 3, 6, 1, 2): True, (4, 5, 3, 6, 2, 1): True, (4, 5, 6, 1, 2, 3): True, (4, 5, 6, 1, 3, 2): True, (4, 5, 6, 2, 1, 3): True, (4, 5, 6, 2, 3, 1): True, (4, 5, 6, 3, 1, 2): True, (4, 5, 6, 3, 2, 1): True, (4, 6, 1, 2, 3, 5): True, (4, 6, 1, 2, 5, 3): True, (4, 6, 1, 3, 2, 5): True, (4, 6, 1, 3, 5, 2): True, (4, 6, 1, 5, 2, 3): True, (4, 6, 1, 5, 3, 2): True, (4, 6, 2, 1, 3, 5): True, (4, 6, 2, 1, 5, 3): True, (4, 6, 2, 3, 1, 5): True, (4, 6, 2, 3, 5, 1): True, (4, 6, 2, 5, 1, 3): True, (4, 6, 2, 5, 3, 1): True, (4, 6, 3, 1, 2, 5): True, (4, 6, 3, 1, 5, 2): True, (4, 6, 3, 2, 1, 5): True, (4, 6, 3, 2, 5, 1): True, (4, 6, 3, 5, 1, 2): True, (4, 6, 3, 5, 2, 1): True, (4, 6, 5, 1, 2, 3): True, (4, 6, 5, 1, 3, 2): True, (4, 6, 5, 2, 1, 3): True, (4, 6, 5, 2, 3, 1): True, (4, 6, 5, 3, 1, 2): True, (4, 6, 5, 3, 2, 1): True, (5, 1, 2, 3, 4, 6): True, (5, 1, 2, 3, 6, 4): True, (5, 1, 2, 4, 3, 6): True, (5, 1, 2, 4, 6, 3): True, (5, 1, 2, 6, 3, 4): True, (5, 1, 2, 6, 4, 3): True, (5, 1, 3, 2, 4, 6): True, (5, 1, 3, 2, 6, 4): True, (5, 1, 3, 4, 2, 6): True, (5, 1, 3, 4, 6, 2): True, (5, 1, 3, 6, 2, 4): True, (5, 1, 3, 6, 4, 2): True, (5, 1, 4, 2, 3, 6): True, (5, 1, 4, 2, 6, 3): True, (5, 1, 4, 3, 2, 6): True, (5, 1, 4, 3, 6, 2): True, (5, 1, 4, 6, 2, 3): True, (5, 1, 4, 6, 3, 2): True, (5, 1, 6, 2, 3, 4): True, (5, 1, 6, 2, 4, 3): True, (5, 1, 6, 3, 2, 4): True, (5, 1, 6, 3, 4, 2): True, (5, 1, 6, 4, 2, 3): True, (5, 1, 6, 4, 3, 2): True, (5, 2, 1, 3, 4, 6): True, (5, 2, 1, 3, 6, 4): True, (5, 2, 1, 4, 3, 6): True, (5, 2, 1, 4, 6, 3): True, (5, 2, 1, 6, 3, 4): True, (5, 2, 1, 6, 4, 3): True, (5, 2, 3, 1, 4, 6): True, (5, 2, 3, 1, 6, 4): True, (5, 2, 3, 4, 1, 6): True, (5, 2, 3, 4, 6, 1): True, (5, 2, 3, 6, 1, 4): True, (5, 2, 3, 6, 4, 1): True, (5, 2, 4, 1, 3, 6): True, (5, 2, 4, 1, 6, 3): True, (5, 2, 4, 3, 1, 6): True, (5, 2, 4, 3, 6, 1): True, (5, 2, 4, 6, 1, 3): True, (5, 2, 4, 6, 3, 1): True, (5, 2, 6, 1, 3, 4): True, (5, 2, 6, 1, 4, 3): True, (5, 2, 6, 3, 1, 4): True, (5, 2, 6, 3, 4, 1): True, (5, 2, 6, 4, 1, 3): True, (5, 2, 6, 4, 3, 1): True, (5, 3, 1, 2, 4, 6): True, (5, 3, 1, 2, 6, 4): True, (5, 3, 1, 4, 2, 6): True, (5, 3, 1, 4, 6, 2): True, (5, 3, 1, 6, 2, 4): True, (5, 3, 1, 6, 4, 2): True, (5, 3, 2, 1, 4, 6): True, (5, 3, 2, 1, 6, 4): True, (5, 3, 2, 4, 1, 6): True, (5, 3, 2, 4, 6, 1): True, (5, 3, 2, 6, 1, 4): True, (5, 3, 2, 6, 4, 1): True, (5, 3, 4, 1, 2, 6): True, (5, 3, 4, 1, 6, 2): True, (5, 3, 4, 2, 1, 6): True, (5, 3, 4, 2, 6, 1): True, (5, 3, 4, 6, 1, 2): True, (5, 3, 4, 6, 2, 1): True, (5, 3, 6, 1, 2, 4): True, (5, 3, 6, 1, 4, 2): True, (5, 3, 6, 2, 1, 4): True, (5, 3, 6, 2, 4, 1): True, (5, 3, 6, 4, 1, 2): True, (5, 3, 6, 4, 2, 1): True, (5, 4, 1, 2, 3, 6): True, (5, 4, 1, 2, 6, 3): True, (5, 4, 1, 3, 2, 6): True, (5, 4, 1, 3, 6, 2): True, (5, 4, 1, 6, 2, 3): True, (5, 4, 1, 6, 3, 2): True, (5, 4, 2, 1, 3, 6): True, (5, 4, 2, 1, 6, 3): True, (5, 4, 2, 3, 1, 6): True, (5, 4, 2, 3, 6, 1): True, (5, 4, 2, 6, 1, 3): True, (5, 4, 2, 6, 3, 1): True, (5, 4, 3, 1, 2, 6): True, (5, 4, 3, 1, 6, 2): True, (5, 4, 3, 2, 1, 6): True, (5, 4, 3, 2, 6, 1): True, (5, 4, 3, 6, 1, 2): True, (5, 4, 3, 6, 2, 1): True, (5, 4, 6, 1, 2, 3): True, (5, 4, 6, 1, 3, 2): True, (5, 4, 6, 2, 1, 3): True, (5, 4, 6, 2, 3, 1): True, (5, 4, 6, 3, 1, 2): True, (5, 4, 6, 3, 2, 1): True, (5, 6, 1, 2, 3, 4): True, (5, 6, 1, 2, 4, 3): True, (5, 6, 1, 3, 2, 4): True, (5, 6, 1, 3, 4, 2): True, (5, 6, 1, 4, 2, 3): True, (5, 6, 1, 4, 3, 2): True, (5, 6, 2, 1, 3, 4): True, (5, 6, 2, 1, 4, 3): True, (5, 6, 2, 3, 1, 4): True, (5, 6, 2, 3, 4, 1): True, (5, 6, 2, 4, 1, 3): True, (5, 6, 2, 4, 3, 1): True, (5, 6, 3, 1, 2, 4): True, (5, 6, 3, 1, 4, 2): True, (5, 6, 3, 2, 1, 4): True, (5, 6, 3, 2, 4, 1): True, (5, 6, 3, 4, 1, 2): True, (5, 6, 3, 4, 2, 1): True, (5, 6, 4, 1, 2, 3): True, (5, 6, 4, 1, 3, 2): True, (5, 6, 4, 2, 1, 3): True, (5, 6, 4, 2, 3, 1): True, (5, 6, 4, 3, 1, 2): True, (5, 6, 4, 3, 2, 1): True, (6, 1, 2, 3, 4, 5): True, (6, 1, 2, 3, 5, 4): True, (6, 1, 2, 4, 3, 5): True, (6, 1, 2, 4, 5, 3): True, (6, 1, 2, 5, 3, 4): True, (6, 1, 2, 5, 4, 3): True, (6, 1, 3, 2, 4, 5): True, (6, 1, 3, 2, 5, 4): True, (6, 1, 3, 4, 2, 5): True, (6, 1, 3, 4, 5, 2): True, (6, 1, 3, 5, 2, 4): True, (6, 1, 3, 5, 4, 2): True, (6, 1, 4, 2, 3, 5): True, (6, 1, 4, 2, 5, 3): True, (6, 1, 4, 3, 2, 5): True, (6, 1, 4, 3, 5, 2): True, (6, 1, 4, 5, 2, 3): True, (6, 1, 4, 5, 3, 2): True, (6, 1, 5, 2, 3, 4): True, (6, 1, 5, 2, 4, 3): True, (6, 1, 5, 3, 2, 4): True, (6, 1, 5, 3, 4, 2): True, (6, 1, 5, 4, 2, 3): True, (6, 1, 5, 4, 3, 2): True, (6, 2, 1, 3, 4, 5): True, (6, 2, 1, 3, 5, 4): True, (6, 2, 1, 4, 3, 5): True, (6, 2, 1, 4, 5, 3): True, (6, 2, 1, 5, 3, 4): True, (6, 2, 1, 5, 4, 3): True, (6, 2, 3, 1, 4, 5): True, (6, 2, 3, 1, 5, 4): True, (6, 2, 3, 4, 1, 5): True, (6, 2, 3, 4, 5, 1): True, (6, 2, 3, 5, 1, 4): True, (6, 2, 3, 5, 4, 1): True, (6, 2, 4, 1, 3, 5): True, (6, 2, 4, 1, 5, 3): True, (6, 2, 4, 3, 1, 5): True, (6, 2, 4, 3, 5, 1): True, (6, 2, 4, 5, 1, 3): True, (6, 2, 4, 5, 3, 1): True, (6, 2, 5, 1, 3, 4): True, (6, 2, 5, 1, 4, 3): True, (6, 2, 5, 3, 1, 4): True, (6, 2, 5, 3, 4, 1): True, (6, 2, 5, 4, 1, 3): True, (6, 2, 5, 4, 3, 1): True, (6, 3, 1, 2, 4, 5): True, (6, 3, 1, 2, 5, 4): True, (6, 3, 1, 4, 2, 5): True, (6, 3, 1, 4, 5, 2): True, (6, 3, 1, 5, 2, 4): True, (6, 3, 1, 5, 4, 2): True, (6, 3, 2, 1, 4, 5): True, (6, 3, 2, 1, 5, 4): True, (6, 3, 2, 4, 1, 5): True, (6, 3, 2, 4, 5, 1): True, (6, 3, 2, 5, 1, 4): True, (6, 3, 2, 5, 4, 1): True, (6, 3, 4, 1, 2, 5): True, (6, 3, 4, 1, 5, 2): True, (6, 3, 4, 2, 1, 5): True, (6, 3, 4, 2, 5, 1): True, (6, 3, 4, 5, 1, 2): True, (6, 3, 4, 5, 2, 1): True, (6, 3, 5, 1, 2, 4): True, (6, 3, 5, 1, 4, 2): True, (6, 3, 5, 2, 1, 4): True, (6, 3, 5, 2, 4, 1): True, (6, 3, 5, 4, 1, 2): True, (6, 3, 5, 4, 2, 1): True, (6, 4, 1, 2, 3, 5): True, (6, 4, 1, 2, 5, 3): True, (6, 4, 1, 3, 2, 5): True, (6, 4, 1, 3, 5, 2): True, (6, 4, 1, 5, 2, 3): True, (6, 4, 1, 5, 3, 2): True, (6, 4, 2, 1, 3, 5): True, (6, 4, 2, 1, 5, 3): True, (6, 4, 2, 3, 1, 5): True, (6, 4, 2, 3, 5, 1): True, (6, 4, 2, 5, 1, 3): True, (6, 4, 2, 5, 3, 1): True, (6, 4, 3, 1, 2, 5): True, (6, 4, 3, 1, 5, 2): True, (6, 4, 3, 2, 1, 5): True, (6, 4, 3, 2, 5, 1): True, (6, 4, 3, 5, 1, 2): True, (6, 4, 3, 5, 2, 1): True, (6, 4, 5, 1, 2, 3): True, (6, 4, 5, 1, 3, 2): True, (6, 4, 5, 2, 1, 3): True, (6, 4, 5, 2, 3, 1): True, (6, 4, 5, 3, 1, 2): True, (6, 4, 5, 3, 2, 1): True, (6, 5, 1, 2, 3, 4): True, (6, 5, 1, 2, 4, 3): True, (6, 5, 1, 3, 2, 4): True, (6, 5, 1, 3, 4, 2): True, (6, 5, 1, 4, 2, 3): True, (6, 5, 1, 4, 3, 2): True, (6, 5, 2, 1, 3, 4): True, (6, 5, 2, 1, 4, 3): True, (6, 5, 2, 3, 1, 4): True, (6, 5, 2, 3, 4, 1): True, (6, 5, 2, 4, 1, 3): True, (6, 5, 2, 4, 3, 1): True, (6, 5, 3, 1, 2, 4): True, (6, 5, 3, 1, 4, 2): True, (6, 5, 3, 2, 1, 4): True, (6, 5, 3, 2, 4, 1): True, (6, 5, 3, 4, 1, 2): True, (6, 5, 3, 4, 2, 1): True, (6, 5, 4, 1, 2, 3): True, (6, 5, 4, 1, 3, 2): True, (6, 5, 4, 2, 1, 3): True, (6, 5, 4, 2, 3, 1): True, (6, 5, 4, 3, 1, 2): True, (6, 5, 4, 3, 2, 1): True}


----------------------------------------------------------------------
Ran 44 tests in 7.594s

FAILED (failures=10, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0007s
test_bne_grid_2: 0.0022s
test_bne_grid_3: 0.0052s
test_bne_grid_4: 0.0122s
test_bne_grid_5: 0.0380s
test_nary_grid_1: 0.4756s
test_nary_grid_2: 0.0771s
test_nary_grid_3: 0.6073s
test_nary_grid_4: 3.4201s
test_bin_prop_fc_0: 0.1122s
test_bin_prop_fc_1: 0.0068s
test_bin_prop_fc_2: 0.0019s
test_bin_prop_fc_3: 0.0021s
test_bin_prop_fc_4: 0.0131s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0020s
test_prop_fc_2: 0.0083s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0071s
test_prop_GAC_0: 0.0010s
test_prop_GAC_1: 0.0034s
test_prop_GAC_2: 0.0108s
test_prop_GAC_3: 0.0021s
test_prop_GAC_4: 0.0045s
test_prop_GAC_5: 0.0603s
test_prop_GAC_6: 0.2566s
test_prop_GAC_7: 0.0654s
test_prop_GAC_8: 1.3126s
test_prop_GAC_9: 1.0118s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.0/0.25
CAGEY: 0.0/0.5

TOTAL: 2.0/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:18:25

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... ok
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... ok
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... ok
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... ok
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


----------------------------------------------------------------------
Ran 44 tests in 2.748s

FAILED (failures=6, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0010s
test_bne_grid_2: 0.0000s
test_bne_grid_3: 0.0067s
test_bne_grid_4: 0.0118s
test_bne_grid_5: 0.0335s
test_nary_grid_1: 0.0083s
test_nary_grid_2: 0.0020s
test_nary_grid_3: 0.0095s
test_nary_grid_4: 0.1435s
test_bin_prop_fc_0: 0.0020s
test_bin_prop_fc_1: 0.0079s
test_bin_prop_fc_2: 0.0030s
test_bin_prop_fc_3: 0.0113s
test_bin_prop_fc_4: 0.0051s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0038s
test_prop_fc_2: 0.0191s
test_prop_fc_3: 0.0030s
test_prop_fc_4: 0.0109s
test_prop_GAC_0: 0.0021s
test_prop_GAC_1: 0.0040s
test_prop_GAC_2: 0.0078s
test_prop_GAC_3: 0.0053s
test_prop_GAC_4: 0.0078s
test_prop_GAC_5: 0.0611s
test_prop_GAC_6: 0.1748s
test_prop_GAC_7: 0.0354s
test_prop_GAC_8: 1.0823s
test_prop_GAC_9: 1.0266s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.25/0.25
CAGEY: 0.0/0.5

TOTAL: 2.25/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:18:53

===========================================
test_bne_grid_1 (__main__.TestBinaryGrid.test_bne_grid_1) ... ok
test_bne_grid_2 (__main__.TestBinaryGrid.test_bne_grid_2) ... ok
test_bne_grid_3 (__main__.TestBinaryGrid.test_bne_grid_3) ... ok
test_bne_grid_4 (__main__.TestBinaryGrid.test_bne_grid_4) ... ok
test_bne_grid_5 (__main__.TestBinaryGrid.test_bne_grid_5) ... ok
test_cage_existence (__main__.TestCageConstraints.test_cage_existence) ... ERROR
test_cages_1 (__main__.TestCageConstraints.test_cages_1) ... FAIL
test_cages_2 (__main__.TestCageConstraints.test_cages_2) ... FAIL
test_cages_3 (__main__.TestCageConstraints.test_cages_3) ... FAIL
test_cages_4 (__main__.TestCageConstraints.test_cages_4) ... FAIL
test_cages_5 (__main__.TestCageConstraints.test_cages_5) ... FAIL
test_cages_6 (__main__.TestCageConstraints.test_cages_6) ... FAIL
test_dh_1 (__main__.TestDH.test_dh_1) ... ok
test_dh_2 (__main__.TestDH.test_dh_2) ... ok
test_dh_3 (__main__.TestDH.test_dh_3) ... ok
test_dh_4 (__main__.TestDH.test_dh_4) ... ok
test_mrv_1 (__main__.TestMRV.test_mrv_1) ... ok
test_mrv_2 (__main__.TestMRV.test_mrv_2) ... ok
test_mrv_3 (__main__.TestMRV.test_mrv_3) ... ok
test_mrv_4 (__main__.TestMRV.test_mrv_4) ... ok
test_nary_grid_1 (__main__.TestNaryGrid.test_nary_grid_1) ... ok
test_nary_grid_2 (__main__.TestNaryGrid.test_nary_grid_2) ... ok
test_nary_grid_3 (__main__.TestNaryGrid.test_nary_grid_3) ... ok
test_nary_grid_4 (__main__.TestNaryGrid.test_nary_grid_4) ... ok
test_bin_prop_fc_0 (__main__.TestPropFC.test_bin_prop_fc_0) ... ok
test_bin_prop_fc_1 (__main__.TestPropFC.test_bin_prop_fc_1) ... ok
test_bin_prop_fc_2 (__main__.TestPropFC.test_bin_prop_fc_2) ... ok
test_bin_prop_fc_3 (__main__.TestPropFC.test_bin_prop_fc_3) ... ok
test_bin_prop_fc_4 (__main__.TestPropFC.test_bin_prop_fc_4) ... ok
test_prop_fc_0 (__main__.TestPropFC.test_prop_fc_0) ... ok
test_prop_fc_1 (__main__.TestPropFC.test_prop_fc_1) ... ok
test_prop_fc_2 (__main__.TestPropFC.test_prop_fc_2) ... ok
test_prop_fc_3 (__main__.TestPropFC.test_prop_fc_3) ... ok
test_prop_fc_4 (__main__.TestPropFC.test_prop_fc_4) ... ok
test_prop_GAC_0 (__main__.TestPropGAC.test_prop_GAC_0) ... ok
test_prop_GAC_1 (__main__.TestPropGAC.test_prop_GAC_1) ... ok
test_prop_GAC_2 (__main__.TestPropGAC.test_prop_GAC_2) ... ok
test_prop_GAC_3 (__main__.TestPropGAC.test_prop_GAC_3) ... ok
test_prop_GAC_4 (__main__.TestPropGAC.test_prop_GAC_4) ... ok
test_prop_GAC_5 (__main__.TestPropGAC.test_prop_GAC_5) ... ok
test_prop_GAC_6 (__main__.TestPropGAC.test_prop_GAC_6) ... ok
test_prop_GAC_7 (__main__.TestPropGAC.test_prop_GAC_7) ... ok
test_prop_GAC_8 (__main__.TestPropGAC.test_prop_GAC_8) ... ok
test_prop_GAC_9 (__main__.TestPropGAC.test_prop_GAC_9) ... ok

======================================================================
ERROR: test_cage_existence (__main__.TestCageConstraints.test_cage_existence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\user\Desktop\CISC-352-A1\a1 3\autograder_stu.py", line 616, in test_cage_existence
    csp, var_array = cagey_csp_model(board)
    ^^^^^^^^^^^^^^
TypeError: cannot unpack non-iterable NoneType object

======================================================================
FAIL: test_cages_1 (__main__.TestCageConstraints.test_cages_1)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '+')])


======================================================================
FAIL: test_cages_2 (__main__.TestCageConstraints.test_cages_2)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '-')])


======================================================================
FAIL: test_cages_3 (__main__.TestCageConstraints.test_cages_3)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(2, [(4, [(1, 1), (1, 2), (2, 1), (2, 2)], '*')])


======================================================================
FAIL: test_cages_4 (__main__.TestCageConstraints.test_cages_4)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '+')])


======================================================================
FAIL: test_cages_5 (__main__.TestCageConstraints.test_cages_5)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(7, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '-')])


======================================================================
FAIL: test_cages_6 (__main__.TestCageConstraints.test_cages_6)
----------------------------------------------------------------------
AssertionError: False is not true : 

Student code threw exception "cannot unpack non-iterable NoneType object". Failed to construct board!
(3, [(10, [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)], '*')])


----------------------------------------------------------------------
Ran 44 tests in 3.131s

FAILED (failures=6, errors=1)
----------------------------------------------------------------------
Time spent:

test_bne_grid_1: 0.0075s
test_bne_grid_2: 0.0010s
test_bne_grid_3: 0.0098s
test_bne_grid_4: 0.0282s
test_bne_grid_5: 0.0755s
test_nary_grid_1: 0.0000s
test_nary_grid_2: 0.0030s
test_nary_grid_3: 0.0235s
test_nary_grid_4: 0.1349s
test_bin_prop_fc_0: 0.0000s
test_bin_prop_fc_1: 0.0010s
test_bin_prop_fc_2: 0.0052s
test_bin_prop_fc_3: 0.0051s
test_bin_prop_fc_4: 0.0020s
test_prop_fc_0: 0.0010s
test_prop_fc_1: 0.0010s
test_prop_fc_2: 0.0088s
test_prop_fc_3: 0.0020s
test_prop_fc_4: 0.0020s
test_prop_GAC_0: 0.0000s
test_prop_GAC_1: 0.0032s
test_prop_GAC_2: 0.0020s
test_prop_GAC_3: 0.0034s
test_prop_GAC_4: 0.0010s
test_prop_GAC_5: 0.0453s
test_prop_GAC_6: 0.2393s
test_prop_GAC_7: 0.0380s
test_prop_GAC_8: 1.3275s
test_prop_GAC_9: 1.0705s
----------------------------------------------------------------------
Grades:

FC: 0.5/0.5
GAC: 0.75/0.75
MRV: 0.25/0.25
DH: 0.25/0.25
BINARY: 0.25/0.25
NARY: 0.25/0.25
CAGEY: 0.0/0.5

TOTAL: 2.25/2.75
Code quality: ?/0.25

Running time: 2024_02_05-14:19:39

===========================================
